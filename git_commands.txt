Команда в терминале для навигации между директориями и команды с файлами:

cd <directory_name> - перейти в указанную под директорию
cd - переход в домашний каталог
cd .. - перейти в родительскую директорию (на один уровень выше текущей)
cd / - перейти в корневую директорию
cd ~ - перейти в домашнюю директорию пользователя (/home/user)
cd - - перейти в предыдущий каталог
cd /path/to/directory - укажите полный путь к каталогу, в который вы хотите перейти
cd <Tab> - нажмите Tab после ввода начальных символов имени каталога, и терминал автоматически дополнит имя каталога, если есть однозначное соответствие
dir - список файлов и каталогов в текущем каталоге
mkdir <directory> - создание нового каталога
del <file> - удаление файлов
copy <source> <destination> - копирование файлов
echo <text> - вывод текста на экран

Ниже перечислены основные команды git (системы контроля версий):

git init - создает новый репозиторий git в текущей директории
git clone <URL_удаленного_репозитория> - копирует существующий удалённый репозиторий на GitHub в локальную директорию.
git add <имя_файла> - добавления изменений в индекс (staging area) в git (добавление в отслеживаемое для последующего коммита)
git add . - добаление всех файлов в текущей директории в ослеживаемое
git status - отображает текущее состояние репозитория git, включая изменения, не добавленные в индекс
git commit -m "message" - сохраняет изменения в репозитории git
git log - отображает список коммитов в репозитории git
git log --graph - просмотр истории коммитов в виде графа, что позволяет визуально представить ветвление и объединение веток
git remote add origin <URL_удаленного_репозитория> - связать удалённый репозиторий "origin" и локальный репозиторий 
git remote set-url origin <URL_удаленного_репозитория> - изменить связь с удалённым репозиторием
git push -u origin <название_ветки> - отправляет локальные изменения в ветке в удаленный репозиторий "origin" (в дальнейшем git push)
git pull origin <название_ветки> - получает изменения из удаленной ветки <название_ветки> в удаленном репозитории origin и объединяет их с текущей веткой
git pull используется для получения и объединения изменений из удаленного репозитория в ваш локальный репозиторий. Она включает в себя две операции: 
git fetch, которая получает изменения из удаленного репозитория, и git merge, которая объединяет эти изменения с вашей текущей веткой
git merge <название_ветки> - объединяет изменения <название_ветки> в другую (на которой находимся)
git branch - отображает список веток в репозитории Git и текущую активную ветку
git branch -d <название_ветки> - удаление ветки
git checkout <имя_ветки/commit> - переключает между ветками или восстанавливает файлы из предыдущих коммитов
git checkout -b <имя_ветки> - создать ветку и сразу переключиться на неё
git diff - позволяет вам просматривать изменения, которые были сделаны, но ещё не добавлены в индекс (staging area), а также изменения между коммитами

Ниже перечислены дополнительные команды git (системы контроля версий):
git fetch origin - получает изменения из удаленного репозитория "origin" и обновляет информацию о ветках и коммитах в локальном репозитории
git log origin/main ^main - просмотреть коммиты, которые есть в удаленной ветке, но отсутствуют в вашей текущей ветке
git diff <1 commit> <2 commit> <название файла> - просмотреть изменения между коммитами в файле
git diff <1 commit> <2 commit> - просмотреть изменения во всём проекте между коммитами
git diff <commit> - сравнить коммит с последней закоммиченной версией
git remote -v - вывод списка всех удаленных репозиториев, связанных с вашим локальным репозиторием git
git restore <file> - отменит все изменения в указанном файле и вернёт его к состоянию в последнем коммите
git restore --staged <file> - сбросит изменения в указанном файле, которые были добавлены в индекс
git restore <commit> -- <file> - восстановит указанный файл в состояние, которое он имел в указанном коммите
git stash - используется для временного сохранения изменений в рабочем каталоге, чтобы переключаться на другую ветку без необходимости коммитить эти изменения
git revert <commit> -  создаст новый коммит, который отменяет изменения, внесенные указанным <commit>, и добавит его в историю
git rebase <branch> - используется для переоснования (rebase) коммитов на другую ветку или для объединения последовательности коммитов в один коммит. 
При выполнении git rebase изменяется история коммитов, перемещая коммиты на новое место или объединяя их.

Merge означает создание нового коммита, который объединяет изменения из двух веток. При выполнении слияния Git создает специальный коммит с двумя предками, 
указывающими на состояния веток, которые сливаются. Это позволяет объединить изменения, сохраняя историю каждой ветки. В результате в истории проекта 
появляется дополнительный коммит слияния. Rebase, с другой стороны, изменяет историю коммитов. При выполнении перебазирования Git перемещает ветку в другое 
место и применяет коммиты из одной ветки на другую. Это означает, что коммиты из одной ветки применяются последовательно поверх коммитов другой ветки, 
создавая линейную историю. В результате история проекта становится более линейной, но оригинальные коммиты истории изменяются.


Последовательность команд, предлагаемая при создании нового удалённого репозитория на GitHub:
git remote add origin <URL_удаленного_репозитория> - используется для добавления удаленного репозитория с именем "origin" в локальный репозиторий Git. 
"origin" является обычным именем, используемым для ссылки на удаленный репозиторий по умолчанию, но вы можете использовать любое другое имя вместо него.
git branch -M main - изменяет имя текущей ветки на main и обновляет ссылки на ветку в локальном репозитории.
git push -u origin main - используется для отправки изменений из локальной ветки main в удаленный репозиторий с именем origin. 
Опция -u используется для установки отслеживаемой ветки, чтобы в будущем использовать git push без явного указания имени ветки и удаленного репозитория.

Последовательность операций для выполнения Pull Request (запрос/предложение изменения кода):

Делаем Fork выбранного удалённого репозитория на сайте GitHub (если нужен Pull Request, другому пользователю)
Делаем git clone СВОЕЙ версии удалённого репозитория с GitHub на локальную директорию 
Создаём новую ветку git branch и в неё вносим свои изменения
Фиксируем изменения git add (все нужные файлы), затем сохраняем их git commit
Отправляем свою локальную версию версию, в свой удалённый репозиторий на GitHub с помощью git push (на Fork-нутую версию, проверить: git remote -v)
На сайте GitHub в нашем удалённом репозитории, нажимаем кнопку Pull Request

После выполнения Pull Request, в зависимости от результата рассмотрения и утверждения изменений, могут быть различные дальнейшие операции: 

Merge (слияние): Если изменения, представленные в Pull Request, рассмотрены и утверждены, они могут быть объединены (слиты) с целевой веткой проекта. 
В результате изменения в PR будут включены в основную линию разработки проекта.

Reject (отклонение): Если изменения, представленные в Pull Request, не соответствуют требованиям проекта или нуждаются в доработке, PR может быть отклонен. 
В этом случае разработчику может быть предложено внести изменения или устранить замечания, после чего можно создать новый Pull Request с исправлениями.

Discussion (обсуждение): При рассмотрении Pull Request могут возникать комментарии, предложения или вопросы от других разработчиков. 
В таком случае можно провести обсуждение изменений, отвечать на комментарии, решать возникающие вопросы и работать над улучшением кода на основе обратной связи.

Close (закрытие): После объединения (слияния) или отклонения Pull Request он может быть закрыт. Это формально завершает процесс рассмотрения и слияния изменений. 
Закрытый Pull Request все еще остается доступным для просмотра и архивирован в истории проекта.

Update (обновление): Если после открытия Pull Request в исходной ветке произошли новые изменения, разработчик может обновить свою ветку и Pull Request, 
чтобы включить последние изменения перед рассмотрением.

